apply plugin: 'net.neoforged.gradle'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "plan-forge-refmap.json"

    config 'plan.mixins.json'
}

minecraft {
    mappings channel: "official", version: "1.20.1"
    copyIdeResources = true
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file("run/${it.name}")

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

/*configurations {
    compileClasspath {
        resolutionStrategy.force 'com.google.guava:guava:23.6-jre'
    }
}*/

dependencies {
    shadow project(path: ":api")
    shadow project(path: ":extensions")
    shadow project(path: ":common")
    shadow project(path: ":common", configuration: "swaggerJson")

    shadow "net.playeranalytics:platform-abstraction-layer-api:$palVersion"

    minecraft "net.neoforged:forge:1.20.1-47.1.65"
    compileOnly("net.luckperms:api:5.4")

/*    annotationProcessor('org.spongepowered:mixin:0.8.5:processor') {
        exclude group: 'com.google.guava', module: 'guava'
    }*/
    testImplementation project(path: ":common", configuration: 'testArtifacts')
}

tasks.withType(JavaCompile).configureEach {
    options.release.set(17)
}

processResources {
    inputs.property "version", fullVersion.toString().replace(" ", ".")

    filesMatching("META-INF/mods.toml") {
        expand "version": fullVersion.toString().replace(" ", ".")
    }
}

shadowJar {
    configurations = [project.configurations.shadow]

    archiveBaseName.set('PlanForge')
    archiveClassifier.set('')

    from findProject(':extensions:adventure').tasks.shadowJar.archiveFile

    // Exclude these files
    exclude "**/*.svg"
    exclude "**/*.psd"
    exclude "**/*.map"
    exclude "LICENSE*.txt"
    exclude "jetty-dir.css"

    exclude "**/module-info.class"
    exclude "module-info.class"
    exclude 'META-INF/versions/' // Causes Sponge to crash
    exclude 'mozilla/**/*'

    // Exclude extra dependencies
    exclude 'org/apache/http/**/*' // Unnecessary http client depended on by geolite2 implementation
    exclude "org/junit/**/*" // see extensions/build.gradle
    exclude "org/opentest4j/**/*" // see extensions/build.gradle
    exclude "org/checkerframework/**/*" // Dagger compiler
    exclude "com/google/common/**/*"
    exclude "com/google/thirdparty/**/*"
    // Exclude swagger
    exclude "org/yaml/**/*"
    exclude "nonapi/**/*"
    exclude "io/github/classgraph/**/*"
    exclude "io/swagger/**/*"
    exclude "com/sun/activation/**/*"
    exclude "jakarta/activation/**/*"
    exclude "jakarta/validation/**/*"
    exclude "jakarta/ws/**/*"
    exclude "jakarta/xml/**/*"
    exclude "javassist/**/*"

    exclude "org/apache/commons/lang3/**"
    exclude "org/apache/maven/**"
    //Forge includes this so have to be more exclusive
    relocate('org.apache', 'plan.org.apache') {
        exclude 'org/apache/logging/**'
        exclude 'org/apache/commons/lang3/**'
        exclude 'org/apache/maven/**'
    }
    relocate('plan.org.apache.maven', 'org.apache.maven')
    relocate 'dagger', 'plan.dagger'
    // Don't relocate MySQL or SQLite since they are loaded with a isolated class loader
    // relocate 'org.sqlite', 'plan.org.sqlite'
    // relocate 'com.mysql', 'plan.com.mysql'
    // relocate 'com.google.protobuf', 'plan.com.mysql.cj.x.google.protobuf'
    relocate 'javax.inject', 'plan.javax.inject'
    relocate 'com.github.benmanes', 'plan.com.github.benmanes'
    relocate 'dev.vankka.dependencydownload', 'plan.dev.vankka.dependencydownload'

    relocate 'com.maxmind', 'plan.com.maxmind'
    relocate 'com.fasterxml', 'plan.com.fasterxml'
    relocate 'com.zaxxer', 'plan.com.zaxxer'
    relocate 'com.google.gson', 'plan.com.google.gson'
    relocate 'com.google.errorprone', 'plan.com.google.errorprone'
    relocate 'org.bstats', 'plan.org.bstats'

    relocate 'org.eclipse.jetty', 'plan.org.eclipse.jetty'
    relocate 'jakarta.servlet', 'plan.jakarta.servlet'
    relocate 'javax.servlet', 'plan.javax.servlet'

    relocate 'org.slf4j', 'plan.org.slf4j'

    relocate 'org.json.simple', 'plan.org.json.simple'
    relocate 'net.kyori', 'plan.net.kyori'

    mergeServiceFiles()
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

artifacts {
    archives shadowJar
}

build.dependsOn tasks.shadowJar

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}